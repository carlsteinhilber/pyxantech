$number-of-steps: 7;

@function to-fixed($float, $digits: 2) {
    $sass-precision: 5;
    
    @if $digits > $sass-precision {
      @warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now."
      + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`."
      + "See https://github.com/sass/sass/issues/1122 for further informations.";
    }
    
    $pow: pow(10, $digits);
    @return round($float * $pow) / $pow;
}
  
.loading-curtain {
    position: fixed;
    left: 0px;
    top: 0px;
    width: 100%;
    height: 100%;
    background: #EEE;
}

.loading-wrapper {
    /* Size and position */
    font-size: 25px;
    /* 1em */
    width: 8em;
    height: 8em;
    position: fixed;
    left: 50%;
    top: 50%;
    margin-top: -100px;
    margin-left: -100px;
    /* Styles */
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    border: 1em dashed rgba(138, 189, 195, 0.5);
    box-shadow: inset 0 0 2em rgba(255, 255, 255, 0.3), 0 0 0 0.7em rgba(255, 255, 255, 0.3);
    animation: rota 3.5s linear infinite;
    /* Font styles */
    font-family: 'Racing Sans One', sans-serif;
    color: #444;
    text-align: center;
    text-transform: uppercase;
    text-shadow: 0 .04em rgba(255, 255, 255, 0.9);
    line-height: 6em;
    &:before,
    &:after {
        border: 1em dashed;    
        border-radius: inherit;
        box-shadow: inset 0 0 2em rgba(255, 255, 255, 0.3);
        content: "";
        position: absolute;
        z-index: -1;
    }
    &:before {
        border-color: rgba(138, 189, 195, 0.2);
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
    }
    &:after {
        border-color: rgba(138, 189, 195, 0.4);
        bottom: 1em;
        left: 1em;
        right: 1em;
        top: 1em;
    }
    & .loading-inner {
        animation: rota 3.5s linear reverse infinite;
        height: 100%;
        width: 100%;
    }
    & span {
        animation: placeholder 1.5s ease-out infinite;
        display: inline-block;
        @for $l from 1 through $number-of-steps {
        &:nth-child(#{$l}) {
            animation-name: loading-#{$l};
        }
        }
    }
}

@keyframes rota {
    to {
        transform: rotate(360deg);
    }
}

@keyframes loading-1 {
    14.28% {
        opacity: 0.3;
    }
}

@keyframes loading-2 {
    28.57% {
        opacity: 0.3;
    }
}

@keyframes loading-3 {
    42.86% {
        opacity: 0.3;
    }
}

@keyframes loading-4 {
    57.14% {
        opacity: 0.3;
    }
}

@keyframes loading-5 {
    71.43% {
        opacity: 0.3;
    }
}

@keyframes loading-6 {
    85.71% {
        opacity: 0.3;
    }
}

@keyframes loading-7 {
    100% {
        opacity: 0.3;
    }
}


